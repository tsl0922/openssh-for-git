diff --git a/auth2-pubkey.c b/auth2-pubkey.c
index 3ff6faa..5815a93 100644
--- a/auth2-pubkey.c
+++ b/auth2-pubkey.c
@@ -462,7 +462,7 @@ user_key_command_allowed2(struct passwd *user_pw, Key *key)
 	int ok, found_key = 0;
 	struct passwd *pw;
 	struct stat st;
-	int status, devnull, p[2], i;
+	int status, p1[2], p2[2], i;
 	pid_t pid;
 	char *username, errmsg[512];
 
@@ -499,7 +499,7 @@ user_key_command_allowed2(struct passwd *user_pw, Key *key)
 		goto out;
 	}
 
-	if (pipe(p) != 0) {
+	if (pipe(p1) != 0 || pipe(p2) != 0) {
 		error("%s: pipe: %s", __func__, strerror(errno));
 		goto out;
 	}
@@ -516,21 +516,18 @@ user_key_command_allowed2(struct passwd *user_pw, Key *key)
 	switch ((pid = fork())) {
 	case -1: /* error */
 		error("%s: fork: %s", __func__, strerror(errno));
-		close(p[0]);
-		close(p[1]);
+		close(p1[0]);
+		close(p1[1]);
+		close(p2[0]);
+		close(p2[1]);
 		return 0;
 	case 0: /* child */
 		for (i = 0; i < NSIG; i++)
 			signal(i, SIG_DFL);
 
-		if ((devnull = open(_PATH_DEVNULL, O_RDWR)) == -1) {
-			error("%s: open %s: %s", __func__, _PATH_DEVNULL,
-			    strerror(errno));
-			_exit(1);
-		}
-		/* Keep stderr around a while longer to catch errors */
-		if (dup2(devnull, STDIN_FILENO) == -1 ||
-		    dup2(p[1], STDOUT_FILENO) == -1) {
+		/* Setup input and output pipe */
+		if (dup2(p1[0], STDIN_FILENO) == -1 ||
+		    dup2(p2[1], STDOUT_FILENO) == -1) {
 			error("%s: dup2: %s", __func__, strerror(errno));
 			_exit(1);
 		}
@@ -547,11 +544,6 @@ user_key_command_allowed2(struct passwd *user_pw, Key *key)
 			    strerror(errno));
 			_exit(1);
 		}
-		/* stdin is pointed to /dev/null at this point */
-		if (dup2(STDIN_FILENO, STDERR_FILENO) == -1) {
-			error("%s: dup2: %s", __func__, strerror(errno));
-			_exit(1);
-		}
 
 		execl(options.authorized_keys_command,
 		    options.authorized_keys_command, user_pw->pw_name, NULL);
@@ -565,17 +557,20 @@ user_key_command_allowed2(struct passwd *user_pw, Key *key)
 
 	temporarily_use_uid(pw);
 
-	close(p[1]);
-	if ((f = fdopen(p[0], "r")) == NULL) {
+    close(p1[0]);
+	close(p2[1]);
+	
+	/* Write key to pipe */
+	if ((f = fdopen(p1[1], "w")) == NULL) {
 		error("%s: fdopen: %s", __func__, strerror(errno));
-		close(p[0]);
+		close(p1[1]);
 		/* Don't leave zombie child */
 		kill(pid, SIGTERM);
 		while (waitpid(pid, NULL, 0) == -1 && errno == EINTR)
 			;
 		goto out;
 	}
-	ok = check_authkeys_file(f, options.authorized_keys_command, key, pw);
+	key_write(key, f);
 	fclose(f);
 
 	while (waitpid(pid, &status, 0) == -1) {
@@ -588,7 +583,20 @@ user_key_command_allowed2(struct passwd *user_pw, Key *key)
 		error("AuthorizedKeysCommand %s exited on signal %d",
 		    options.authorized_keys_command, WTERMSIG(status));
 		goto out;
-	} else if (WEXITSTATUS(status) != 0) {
+	} else if(WIFEXITED(status) && WEXITSTATUS(status) == 0) {
+		/* Read key from pipe */
+		if ((f = fdopen(p2[0], "r")) == NULL) {
+			error("%s: fdopen: %s", __func__, strerror(errno));
+			close(p2[0]);
+			/* Don't leave zombie child */
+			kill(pid, SIGTERM);
+			while (waitpid(pid, NULL, 0) == -1 && errno == EINTR)
+				;
+			goto out;
+		}
+		ok = check_authkeys_file(f, options.authorized_keys_command, key, pw);
+		fclose(f);
+	} else {
 		error("AuthorizedKeysCommand %s returned status %d",
 		    options.authorized_keys_command, WEXITSTATUS(status));
 		goto out;
